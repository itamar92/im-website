{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/itamar/Haker U Class/Mid Project React/IM Production-website/im-website/src/Components/No-Use/ProductsList.jsx\";\nimport React, { Component } from \"react\";\nimport ProductCopy from \"./Product copy\";\nimport Product from \"./Product/Product\";\nimport \"../\";\nexport default class ProductsList extends Component {\n  //Executes when the component is mounted\n  constructor(props) {\n    //console.log(\"constructor - ProductsList\");\n    super(props); //calling super class's constructor\n    //initialization of the state\n\n    this.componentDidMount = async () => {\n      //send request to server\n      var response = await fetch(\"http://localhost:5000/products\", {\n        method: \"GET\"\n      }); //the following code executes after receiving response from server\n      //converting the response body into a JS object array\n\n      var prods = await response.json(); //the following code executes after converting response body into JS object array\n\n      console.log(prods); //updating products into component's state\n\n      this.setState({\n        products: prods\n      });\n    };\n\n    this.handleIncrement = (product, maxValue) => {\n      //get index of selected product\n      let allProducts = [...this.state.products];\n      let index = allProducts.indexOf(product);\n\n      if (allProducts[index].quantity < maxValue) {\n        allProducts[index].quantity++; //update the state of current component (parent component)\n\n        this.setState({\n          products: allProducts\n        });\n      }\n    };\n\n    this.handleDecrement = (product, minValue) => {\n      //get index of selected product\n      let allProducts = [...this.state.products];\n      let index = allProducts.indexOf(product);\n\n      if (allProducts[index].quantity > minValue) {\n        allProducts[index].quantity--; //update the state of current component (parent component)\n\n        this.setState({\n          products: allProducts\n        });\n      }\n    };\n\n    this.handleDelete = product => {\n      //get index of selected product\n      let allProducts = [...this.state.products];\n      let index = allProducts.indexOf(product);\n\n      if (window.confirm(\"Are you sure to delete?\")) {\n        //delete product based on index\n        allProducts.splice(index, 1); //update the state of current component (parent component)\n\n        this.setState({\n          products: allProducts\n        });\n      }\n    };\n\n    this.state = {\n      products: []\n    };\n  }\n\n  render() {\n    //console.log(\"render - ProductsList\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"products__title\",\n        children: \"Products List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container products__container\",\n        children: this.state.products.map(prod => {\n          return /*#__PURE__*/_jsxDEV(ProductCopy, {\n            product: prod,\n            onIncrement: this.handleIncrement,\n            onDecrement: this.handleDecrement,\n            onDelete: this.handleDelete,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              children: \"Add to Cart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this)\n          }, prod.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  } // render ends here\n  //Executes after constructor and render method (includes life cycle of child components, if any) of current component\n\n\n  componentDidUpdate(prevProps, prevState) {} //Executes when the current instance of current component is being deleted from memory\n\n\n  componentWillUnmount() {//console.log(\"componentWillUnmount - ProductsList\");\n  }\n\n  componentDidCatch(error, info) {\n    //console.log(\"componentDidCatch - ProductsList\");\n    //console.log(error, info);\n    localStorage.lastError = `${error}\\n${JSON.stringify(info)}`;\n  } //executes when the user clicks on + button.\n\n\n}","map":{"version":3,"sources":["/Users/itamar/Haker U Class/Mid Project React/IM Production-website/im-website/src/Components/No-Use/ProductsList.jsx"],"names":["React","Component","ProductCopy","Product","ProductsList","constructor","props","componentDidMount","response","fetch","method","prods","json","console","log","setState","products","handleIncrement","product","maxValue","allProducts","state","index","indexOf","quantity","handleDecrement","minValue","handleDelete","window","confirm","splice","render","map","prod","id","componentDidUpdate","prevProps","prevState","componentWillUnmount","componentDidCatch","error","info","localStorage","lastError","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ProductCopy from \"./Product copy\";\nimport Product from \"./Product/Product\";\nimport \"../\";\n\nexport default class ProductsList extends Component {\n  //Executes when the component is mounted\n  constructor(props) {\n    //console.log(\"constructor - ProductsList\");\n    super(props); //calling super class's constructor\n\n    //initialization of the state\n    this.state = {\n      products: [],\n    };\n  }\n\n  render() {\n    //console.log(\"render - ProductsList\");\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"products__title\">Products List</h1>\n\n        <div className=\"container products__container\">\n          {this.state.products.map((prod) => {\n            return (\n              <ProductCopy\n                key={prod.id}\n                product={prod}\n                onIncrement={this.handleIncrement}\n                onDecrement={this.handleDecrement}\n                onDelete={this.handleDelete}\n              >\n                <button className=\"btn btn-primary\">Add to Cart</button>\n              </ProductCopy>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n  // render ends here\n\n  //Executes after constructor and render method (includes life cycle of child components, if any) of current component\n  componentDidMount = async () => {\n    //send request to server\n    var response = await fetch(\"http://localhost:5000/products\", {\n      method: \"GET\",\n    });\n\n    //the following code executes after receiving response from server\n    //converting the response body into a JS object array\n    var prods = await response.json();\n\n    //the following code executes after converting response body into JS object array\n    console.log(prods);\n\n    //updating products into component's state\n    this.setState({ products: prods });\n  };\n\n  componentDidUpdate(prevProps, prevState) {}\n\n  //Executes when the current instance of current component is being deleted from memory\n  componentWillUnmount() {\n    //console.log(\"componentWillUnmount - ProductsList\");\n  }\n\n  componentDidCatch(error, info) {\n    //console.log(\"componentDidCatch - ProductsList\");\n    //console.log(error, info);\n\n    localStorage.lastError = `${error}\\n${JSON.stringify(info)}`;\n  }\n\n  //executes when the user clicks on + button.\n  handleIncrement = (product, maxValue) => {\n    //get index of selected product\n    let allProducts = [...this.state.products];\n    let index = allProducts.indexOf(product);\n\n    if (allProducts[index].quantity < maxValue) {\n      allProducts[index].quantity++;\n\n      //update the state of current component (parent component)\n      this.setState({ products: allProducts });\n    }\n  };\n\n  //executes when the user clicks on - button.\n  handleDecrement = (product, minValue) => {\n    //get index of selected product\n    let allProducts = [...this.state.products];\n    let index = allProducts.indexOf(product);\n\n    if (allProducts[index].quantity > minValue) {\n      allProducts[index].quantity--;\n\n      //update the state of current component (parent component)\n      this.setState({ products: allProducts });\n    }\n  };\n\n  //executes when the user clicks on Delete (X) button in the Products component.\n  handleDelete = (product) => {\n    //get index of selected product\n    let allProducts = [...this.state.products];\n    let index = allProducts.indexOf(product);\n\n    if (window.confirm(\"Are you sure to delete?\")) {\n      //delete product based on index\n      allProducts.splice(index, 1);\n\n      //update the state of current component (parent component)\n      this.setState({ products: allProducts });\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}